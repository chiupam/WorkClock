import ast
import datetime
import sqlite3

from fastapi import APIRouter, Request
from fastapi.responses import JSONResponse
from fastapi.templating import Jinja2Templates

from app import USER_DB_FILE, LOG_DB_FILE, SET_DB_FILE, CRON_DB_FILE, SIGN_DB_FILE
from app import logger
from app.auth.dependencies import admin_required
from app.auth.utils import get_mobile_user_agent
from app.utils.log import LogType
from app.utils.host import build_api_url
from config import settings

# 创建路由器
router = APIRouter(tags=["管理员"])

# 设置模板
templates = Jinja2Templates(directory="app/static/templates")

# 部门信息常量（仅后端可见）
DEPARTMENTS = {
    "3": "院领导",
    "7": "政治部",
    "11": "办公室",
    "10": "综合业务部",
    "8": "第一检察部",
    "9": "第二检察部",
    "4": "第三检察部",
    "5": "第四检察部",
    "12": "第五检察部",
    "15": "未成年人检察组",
    "6": "待入职人员",
    "13": "检委办",
    "2": "系统管理员",
    "1": "测试部门",
    "14": "退休离职人员"
}

async def update_admin_active_time(open_id: str):
    """
    更新管理员活跃时间
    """
    conn = sqlite3.connect(USER_DB_FILE)
    cursor = conn.cursor()
    
    # 更新管理员活跃时间    
    cursor.execute("UPDATE users SET last_activity = ? WHERE open_id = ?", (datetime.datetime.now().timestamp(), open_id))
    conn.commit()
    conn.close()


@router.get("/dashboard")
@admin_required
async def admin_dashboard(request: Request):
    """
    管理员仪表盘页面
    """
    
    # 获取基本统计信息
    stats = await get_admin_stats()
    
    # 获取open_id
    open_id = request.cookies.get("open_id")
    
    # 查询当前管理员信息
    conn = sqlite3.connect(USER_DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT username FROM users WHERE open_id = ? AND user_id = 'admin'", 
        (open_id,)
    )
    admin_info = cursor.fetchone()
    conn.close()
    
    admin_name = admin_info[0] if admin_info else "管理员"
    
    # 返回管理员仪表盘
    return templates.TemplateResponse(
        "admin/dashboard.html", 
        {
            "request": request,
            "user_info": {"username": admin_name, "user_id": "admin"},
            "stats": stats,
            "page_title": "管理员仪表盘",
            "current_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    )

@router.get("/stats-data")
@admin_required
async def get_stats_data(request: Request):
    """
    获取最新统计数据的API
    """
    try:
        # 获取基本统计信息
        stats = await get_admin_stats()
        return JSONResponse({
            "success": True,
            "stats": stats
        })
    except Exception as e:
        logger.error(f"获取统计数据失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取统计数据失败: {str(e)}"
        }, status_code=500)

async def get_admin_stats():
    """
    获取系统基本统计信息
    """
    try:
        # 连接数据库
        conn = sqlite3.connect(USER_DB_FILE)
        cursor = conn.cursor()
        
        # 统计总用户数
        cursor.execute("SELECT COUNT(*) FROM users WHERE user_id != 'admin'")
        total_users = cursor.fetchone()[0]
        
        # 统计今日活跃用户
        today_start = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp()
        cursor.execute("SELECT COUNT(*) FROM users WHERE last_activity >= ? AND user_id != 'admin'", (today_start,))
        active_users_today = cursor.fetchone()[0]
        
        # 统计本周活跃用户
        week_start = (datetime.datetime.now() - datetime.timedelta(days=datetime.datetime.now().weekday())).replace(hour=0, minute=0, second=0, microsecond=0).timestamp()
        cursor.execute("SELECT COUNT(*) FROM users WHERE last_activity >= ? AND user_id != 'admin'", (week_start,))
        active_users_week = cursor.fetchone()[0]
        
        # 统计本月活跃用户
        month_start = datetime.datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0).timestamp()
        cursor.execute("SELECT COUNT(*) FROM users WHERE last_activity >= ? AND user_id != 'admin'", (month_start,))
        active_users_month = cursor.fetchone()[0]
        
        # 关闭连接
        conn.close()
        
        # 获取登录日志信息
        conn_log = sqlite3.connect(LOG_DB_FILE)
        cursor_log = conn_log.cursor()
        
        # 获取今日登录次数
        cursor_log.execute("SELECT COUNT(*) FROM login_logs WHERE login_time >= ?", (today_start,))
        today_logins = cursor_log.fetchone()[0]
        
        conn_log.close()
        
        # 获取系统名称设置
        conn_set = sqlite3.connect(SET_DB_FILE)
        cursor_set = conn_set.cursor()
        
        cursor_set.execute("SELECT setting_value FROM system_settings WHERE setting_key = 'system_name'")
        result = cursor_set.fetchone()
        system_name = result[0] if result else "考勤管理系统"
        
        conn_set.close()
        
        # 返回统计信息
        return {
            "total_users": total_users,
            "active_users_today": active_users_today,
            "active_users_week": active_users_week,
            "active_users_month": active_users_month,
            "today_logins": today_logins,
            "system_name": system_name,
            "system_version": settings.APP_VERSION,
            "system_start_time": datetime.datetime.fromtimestamp(settings.START_TIME).strftime("%Y-%m-%d %H:%M:%S") if hasattr(settings, "START_TIME") else "未知"
        }
    except Exception as e:
        # 发生错误，返回默认值
        return {
            "total_users": 0,
            "active_users_today": 0,
            "active_users_week": 0,
            "active_users_month": 0,
            "today_logins": 0,
            "system_name": "考勤管理系统",
            "system_version": settings.APP_VERSION,
            "system_start_time": "未知",
            "error": str(e)
        }

@router.get("/users")
@admin_required
async def admin_users_page(request: Request):
    """
    管理员用户管理页面
    """
    
    # 获取基本统计信息
    stats = await get_admin_stats()
    
    # 获取open_id
    open_id = request.cookies.get("open_id")
    
    # 查询当前管理员信息
    conn = sqlite3.connect(USER_DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT username FROM users WHERE open_id = ? AND user_id = 'admin'", 
        (open_id,)
    )
    admin_info = cursor.fetchone()
    conn.close()
    
    admin_name = admin_info[0] if admin_info else "管理员"
    
    # 返回用户管理页面
    return templates.TemplateResponse(
        "admin/users.html", 
        {
            "request": request,
            "user_info": {"username": admin_name, "user_id": "admin"},
            "stats": stats,
            "page_title": "用户管理",
            "current_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    )

@router.get("/users-api")
@admin_required
async def get_users_api(request: Request):
    """
    获取用户列表API
    """
    try:
        # 连接数据库
        conn = sqlite3.connect(USER_DB_FILE)
        cursor = conn.cursor()
        
        # 查询所有普通用户
        cursor.execute(
            "SELECT id, username, user_id, department_name, department_id, position, first_login_time, last_activity FROM users WHERE user_id != 'admin'"
        )
        users = cursor.fetchall()
        
        # 格式化用户数据
        formatted_users = []
        for user in users:
            first_login = user[6] if user[6] else 0
            last_activity = user[7] if user[7] else 0
            
            formatted_users.append({
                "id": user[0],
                "username": user[1],
                "user_id": user[2],
                "department_name": user[3],
                "department_id": user[4],
                "position": user[5],
                "first_login": first_login,
                "last_activity": last_activity
            })
        
        # 关闭连接
        conn.close()
        
        return JSONResponse({
            "success": True,
            "users": formatted_users
        })
    except Exception as e:
        logger.error(f"获取用户列表失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取用户列表失败: {str(e)}"
        }, status_code=500)

@router.get("/login-logs")
@admin_required
async def get_login_logs(request: Request):
    """
    获取登录日志
    """
    try:
        # 连接数据库
        conn = sqlite3.connect(LOG_DB_FILE)
        cursor = conn.cursor()
        
        # 查询最近的登录日志
        cursor.execute(
            "SELECT id, user_id, username, login_time, ip_address, device_info, status FROM login_logs ORDER BY login_time DESC LIMIT 100"
        )
        logs = cursor.fetchall()
        
        # 格式化日志数据
        formatted_logs = []
        for log in logs:
            login_time = datetime.datetime.fromtimestamp(log[3]).strftime("%Y-%m-%d %H:%M:%S")
            
            formatted_logs.append({
                "id": log[0],
                "user_id": log[1],
                "username": log[2],
                "login_time": login_time,
                "ip_address": log[4],
                "device_info": log[5],
                "status": log[6]
            })
        
        # 关闭连接
        conn.close()
        
        return {
            "success": True,
            "logs": formatted_logs
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"获取登录日志失败: {str(e)}"
        }

@router.post("/settings")
@admin_required
async def update_settings(request: Request):
    """
    更新系统设置
    """
    try:
        # 获取请求数据
        data = await request.json()
        
        # 连接数据库
        conn = sqlite3.connect(SET_DB_FILE)
        cursor = conn.cursor()
        
        # 更新设置
        updated_at = datetime.datetime.now().timestamp()
        
        for key, value in data.items():
            cursor.execute(
                "UPDATE system_settings SET setting_value = ?, updated_at = ? WHERE setting_key = ?",
                (value, updated_at, key)
            )
        
        conn.commit()
        conn.close()
        
        return {
            "success": True,
            "message": "设置已更新"
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"更新设置失败: {str(e)}"
        }

@router.get("/settings")
@admin_required
async def admin_settings_page(request: Request):
    """
    管理员系统设置页面
    """
    
    # 获取基本统计信息
    stats = await get_admin_stats()
    
    # 获取open_id
    open_id = request.cookies.get("open_id")
    
    # 查询当前管理员信息
    conn = sqlite3.connect(USER_DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT username FROM users WHERE open_id = ? AND user_id = 'admin'", 
        (open_id,)
    )
    admin_info = cursor.fetchone()
    conn.close()
    
    admin_name = admin_info[0] if admin_info else "管理员"
    
    # 返回设置页面
    return templates.TemplateResponse(
        "admin/settings.html", 
        {
            "request": request,
            "user_info": {"username": admin_name, "user_id": "admin"},
            "stats": stats,
            "page_title": "系统设置",
            "current_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    )

@router.get("/settings-api")
@admin_required
async def get_settings_api(request: Request):
    """
    获取系统设置API
    """
    try:
        # 连接数据库
        conn = sqlite3.connect(SET_DB_FILE)
        cursor = conn.cursor()
        
        # 获取所有设置
        cursor.execute("SELECT setting_key, setting_value, description FROM system_settings")
        settings_data = cursor.fetchall()
        
        # 格式化设置数据
        formatted_settings = {}
        for setting in settings_data:
            formatted_settings[setting[0]] = {
                "value": setting[1],
                "description": setting[2]
            }
        
        conn.close()
        
        return JSONResponse({
            "success": True,
            "settings": formatted_settings
        })
    except Exception as e:
        logger.error(f"获取设置失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取设置失败: {str(e)}"
        }, status_code=500)

@router.post("/settings-api")
@admin_required
async def update_settings_api(request: Request):
    """
    更新系统设置API
    """
    try:
        # 获取请求数据
        data = await request.json()
        
        # 连接数据库
        conn = sqlite3.connect(SET_DB_FILE)
        cursor = conn.cursor()
        
        # 更新设置
        updated_at = datetime.datetime.now().timestamp()
        
        for key, value in data.items():
            cursor.execute(
                "UPDATE system_settings SET setting_value = ?, updated_at = ? WHERE setting_key = ?",
                (value, updated_at, key)
            )
        
        conn.commit()
        conn.close()
        
        return JSONResponse({
            "success": True,
            "message": "设置已更新"
        })
    except Exception as e:
        logger.error(f"更新设置失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"更新设置失败: {str(e)}"
        }, status_code=500)

# 添加定时任务管理页面
@router.get("/schedules")
@admin_required
async def admin_schedules_page(request: Request):
    """
    管理员定时任务管理页面
    """
    # 获取基本统计信息
    stats = await get_admin_stats()
    
    # 获取open_id
    open_id = request.cookies.get("open_id")
    
    # 查询当前管理员信息
    conn = sqlite3.connect(USER_DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT username FROM users WHERE open_id = ? AND user_id = 'admin'", 
        (open_id,)
    )
    admin_info = cursor.fetchone()
    conn.close()
    
    admin_name = admin_info[0] if admin_info else "管理员"
    
    # 返回定时任务管理页面
    return templates.TemplateResponse(
        "admin/schedules.html", 
        {
            "request": request,
            "user_info": {"username": admin_name, "user_id": "admin"},
            "stats": stats,
            "page_title": "定时任务管理",
            "current_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    )

# 添加获取定时任务API
@router.get("/schedules-api")
@admin_required
async def get_schedules_api(request: Request):
    """
    获取定时任务列表API
    """
    try:
        # 连接cron.db数据库
        conn = sqlite3.connect(CRON_DB_FILE)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # 查询所有定时任务
        cursor.execute(
            """
            SELECT s.id, s.user_id, s.username, s.morning, s.afternoon, 
                   s.schedule_index, s.created_at, s.morning_time, s.afternoon_time,
                   s.morning_selecte, s.afternoon_selecte
            FROM schedules s
            ORDER BY s.created_at DESC
            """
        )
        
        schedules = cursor.fetchall()
        
        # 格式化定时任务数据
        formatted_schedules = []
        for schedule in schedules:
            index = schedule['schedule_index']
            
            # 查询用户详细信息
            user_conn = sqlite3.connect(USER_DB_FILE)
            user_conn.row_factory = sqlite3.Row
            user_cursor = user_conn.cursor()
            user_cursor.execute(
                "SELECT department_name, position FROM users WHERE user_id = ?", 
                (schedule['user_id'],)
            )
            user_info = user_cursor.fetchone()
            user_conn.close()
            
            department = user_info['department_name'] if user_info else "未知"
            position = user_info['position'] if user_info else "未知"
            
            # 解析选择状态数组
            morning_selections = []
            afternoon_selections = []
            
            if schedule['morning_selecte']:
                try:
                    morning_selections = ast.literal_eval(schedule['morning_selecte'])
                except:
                    morning_selections = [0, 0, 0]
            else:
                morning_selections = [0, 0, 0]
            
            if schedule['afternoon_selecte']:
                try:
                    afternoon_selections = ast.literal_eval(schedule['afternoon_selecte'])
                except:
                    afternoon_selections = [0, 0, 0]
            else:
                afternoon_selections = [0, 0, 0]
            
            # 获取选择的时间
            active_morning_times = []
            active_afternoon_times = []
            
            if schedule['morning_time']:
                try:
                    active_morning_times = ast.literal_eval(schedule['morning_time'])
                except:
                    active_morning_times = []
                    
            if schedule['afternoon_time']:
                try:
                    active_afternoon_times = ast.literal_eval(schedule['afternoon_time'])
                except:
                    active_afternoon_times = []
            
            formatted_schedules.append({
                "id": schedule['id'],
                "user_id": schedule['user_id'],
                "username": schedule['username'],
                "department": department,
                "position": position,
                "morning": schedule['morning'] == 1,
                "afternoon": schedule['afternoon'] == 1,
                "morning_times": active_morning_times,
                "afternoon_times": active_afternoon_times,
                "schedule_index": schedule['schedule_index'],
                "morning_selections": morning_selections,
                "afternoon_selections": afternoon_selections,
                "created_at": schedule['created_at']
            })
        
        # 关闭连接
        conn.close()
        
        return JSONResponse({
            "success": True,
            "schedules": formatted_schedules,
            "total": len(formatted_schedules)
        })
    except Exception as e:
        logger.error(f"获取定时任务列表失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取定时任务列表失败: {str(e)}"
        }, status_code=500)

# 添加删除定时任务API
@router.delete("/schedules/{schedule_id}")
@admin_required
async def delete_schedule_api(request: Request, schedule_id: int):
    """
    删除定时任务API
    """
    try:
        # 连接cron.db数据库
        conn = sqlite3.connect(CRON_DB_FILE)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # 获取定时任务信息
        cursor.execute("SELECT user_id FROM schedules WHERE id = ?", (schedule_id,))
        schedule = cursor.fetchone()
        
        if not schedule:
            return JSONResponse({
                "success": False,
                "message": "定时任务不存在"
            }, status_code=404)
        
        user_id = schedule['user_id']
        
        # 删除定时任务
        cursor.execute("DELETE FROM schedules WHERE id = ?", (schedule_id,))
        conn.commit()
        
        # 删除APScheduler中的任务
        from app.routes.crontab import remove_schedule_jobs
        remove_schedule_jobs(user_id)
        
        # 关闭连接
        conn.close()
        
        return JSONResponse({
            "success": True,
            "message": "定时任务已删除"
        })
    except Exception as e:
        logger.error(f"删除定时任务失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"删除定时任务失败: {str(e)}"
        }, status_code=500)

@router.get("/logs")
@admin_required
async def admin_logs_page(request: Request):
    """
    管理员日志查看页面
    """
    
    # 获取基本统计信息
    stats = await get_admin_stats()
    
    # 获取open_id
    open_id = request.cookies.get("open_id")
    
    # 查询当前管理员信息
    conn = sqlite3.connect(USER_DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT username FROM users WHERE open_id = ? AND user_id = 'admin'", 
        (open_id,)
    )
    admin_info = cursor.fetchone()
    conn.close()
    
    admin_name = admin_info[0] if admin_info else "管理员"
    
    # 返回日志查看页面
    return templates.TemplateResponse(
        "admin/logs.html", 
        {
            "request": request,
            "user_info": {"username": admin_name, "user_id": "admin"},
            "stats": stats,
            "page_title": "系统日志",
            "current_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "log_types": vars(LogType)  # 把LogType中的所有常量传到前端
        }
    )

@router.get("/sign-logs-api")
@admin_required
async def get_sign_logs_api(request: Request, page: int = 1, limit: int = 50, username: str = None, date_from: str = None, date_to: str = None, sign_type: str = None, status: str = None):
    """
    获取签到日志API
    """
    try:
        # 连接数据库
        conn = sqlite3.connect(SIGN_DB_FILE)
        cursor = conn.cursor()
        
        # 构建查询条件
        query = "SELECT * FROM sign_logs WHERE 1=1"
        params = []
        
        if username and username.strip():
            query += " AND username LIKE ?"
            params.append(f"%{username}%")
        
        if date_from:
            try:
                from_timestamp = datetime.datetime.strptime(date_from, "%Y-%m-%d").timestamp()
                query += " AND sign_time >= ?"
                params.append(from_timestamp)
            except ValueError:
                pass
        
        if date_to:
            try:
                # 设置为当天的结束时间
                to_date = datetime.datetime.strptime(date_to, "%Y-%m-%d")
                to_date = to_date.replace(hour=23, minute=59, second=59)
                to_timestamp = to_date.timestamp()
                query += " AND sign_time <= ?"
                params.append(to_timestamp)
            except ValueError:
                pass
        
        if sign_type and sign_type != "all":
            query += " AND sign_type = ?"
            params.append(sign_type)
            
        if status and status != "all":
            query += " AND status = ?"
            params.append(status)
        
        # 获取总记录数
        count_query = f"SELECT COUNT(*) FROM ({query})"
        cursor.execute(count_query, params)
        total_count = cursor.fetchone()[0]
        
        # 添加排序和分页
        query += " ORDER BY sign_time DESC LIMIT ? OFFSET ?"
        offset = (page - 1) * limit
        params.extend([limit, offset])
        
        # 执行查询
        cursor.execute(query, params)
        logs = cursor.fetchall()
        
        # 获取列名
        column_names = [description[0] for description in cursor.description]
        
        # 格式化日志数据
        formatted_logs = []
        for log in logs:
            log_dict = dict(zip(column_names, log))
            
            # 转换时间戳为可读时间
            if "sign_time" in log_dict and log_dict["sign_time"]:
                log_dict["sign_time_formatted"] = datetime.datetime.fromtimestamp(
                    log_dict["sign_time"]
                ).strftime("%Y-%m-%d %H:%M:%S")
            
            formatted_logs.append(log_dict)
        
        # 关闭连接
        conn.close()
        
        return JSONResponse({
            "success": True,
            "logs": formatted_logs,
            "total": total_count,
            "page": page,
            "limit": limit,
            "pages": (total_count + limit - 1) // limit
        })
    except Exception as e:
        logger.error(f"获取签到日志失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取签到日志失败: {str(e)}"
        }, status_code=500)

@router.get("/operation-logs-api")
@admin_required
async def get_operation_logs_api(request: Request, page: int = 1, limit: int = 50, username: str = None, date_from: str = None, date_to: str = None, operation_type: str = None, status: str = None):
    """
    获取操作日志API
    """
    try:
        # 连接数据库
        conn = sqlite3.connect(LOG_DB_FILE)
        cursor = conn.cursor()
        
        # 构建查询条件
        query = "SELECT * FROM operation_logs WHERE 1=1"
        params = []
        
        if username and username.strip():
            query += " AND username LIKE ?"
            params.append(f"%{username}%")
        
        if date_from:
            try:
                from_timestamp = datetime.datetime.strptime(date_from, "%Y-%m-%d").timestamp()
                query += " AND operation_time >= ?"
                params.append(from_timestamp)
            except ValueError:
                pass
        
        if date_to:
            try:
                # 设置为当天的结束时间
                to_date = datetime.datetime.strptime(date_to, "%Y-%m-%d")
                to_date = to_date.replace(hour=23, minute=59, second=59)
                to_timestamp = to_date.timestamp()
                query += " AND operation_time <= ?"
                params.append(to_timestamp)
            except ValueError:
                pass
        
        if operation_type and operation_type != "all":
            query += " AND operation_type = ?"
            params.append(operation_type)
            
        if status and status != "all":
            query += " AND status = ?"
            params.append(status)
        
        # 获取总记录数
        count_query = f"SELECT COUNT(*) FROM ({query})"
        cursor.execute(count_query, params)
        total_count = cursor.fetchone()[0]
        
        # 添加排序和分页
        query += " ORDER BY operation_time DESC LIMIT ? OFFSET ?"
        offset = (page - 1) * limit
        params.extend([limit, offset])
        
        # 执行查询
        cursor.execute(query, params)
        logs = cursor.fetchall()
        
        # 获取列名
        column_names = [description[0] for description in cursor.description]
        
        # 格式化日志数据
        formatted_logs = []
        for log in logs:
            log_dict = dict(zip(column_names, log))
            
            # 转换时间戳为可读时间
            if "operation_time" in log_dict and log_dict["operation_time"]:
                log_dict["operation_time_formatted"] = datetime.datetime.fromtimestamp(
                    log_dict["operation_time"]
                ).strftime("%Y-%m-%d %H:%M:%S")
            
            formatted_logs.append(log_dict)
        
        # 关闭连接
        conn.close()
        
        return JSONResponse({
            "success": True,
            "logs": formatted_logs,
            "total": total_count,
            "page": page,
            "limit": limit,
            "pages": (total_count + limit - 1) // limit
        })
    except Exception as e:
        logger.error(f"获取操作日志失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取操作日志失败: {str(e)}"
        }, status_code=500)

@router.get("/login-logs-api")
@admin_required
async def get_login_logs_api(request: Request, page: int = 1, limit: int = 50, username: str = None, user_id: str = None, date_from: str = None, date_to: str = None, status: str = None):
    """
    获取登录日志API
    """
    try:
        # 连接数据库
        conn = sqlite3.connect(LOG_DB_FILE)
        cursor = conn.cursor()
        
        # 构建查询条件
        query = "SELECT * FROM login_logs WHERE 1=1"
        params = []
        
        if username and username.strip():
            query += " AND username LIKE ?"
            params.append(f"%{username}%")
            
        if user_id and user_id.strip():
            query += " AND user_id LIKE ?"
            params.append(f"%{user_id}%")
        
        if date_from:
            try:
                from_timestamp = datetime.datetime.strptime(date_from, "%Y-%m-%d").timestamp()
                query += " AND login_time >= ?"
                params.append(from_timestamp)
            except ValueError:
                pass
        
        if date_to:
            try:
                # 设置为当天的结束时间
                to_date = datetime.datetime.strptime(date_to, "%Y-%m-%d")
                to_date = to_date.replace(hour=23, minute=59, second=59)
                to_timestamp = to_date.timestamp()
                query += " AND login_time <= ?"
                params.append(to_timestamp)
            except ValueError:
                pass
            
        if status and status != "all":
            query += " AND status = ?"
            params.append(status)
        
        # 获取总记录数
        count_query = f"SELECT COUNT(*) FROM ({query})"
        cursor.execute(count_query, params)
        total_count = cursor.fetchone()[0]
        
        # 添加排序和分页
        query += " ORDER BY login_time DESC LIMIT ? OFFSET ?"
        offset = (page - 1) * limit
        params.extend([limit, offset])
        
        # 执行查询
        cursor.execute(query, params)
        logs = cursor.fetchall()
        
        # 获取列名
        column_names = [description[0] for description in cursor.description]
        
        # 格式化日志数据
        formatted_logs = []
        for log in logs:
            log_dict = dict(zip(column_names, log))
            
            # 转换时间戳为可读时间
            if "login_time" in log_dict and log_dict["login_time"]:
                log_dict["login_time_formatted"] = datetime.datetime.fromtimestamp(
                    log_dict["login_time"]
                ).strftime("%Y-%m-%d %H:%M:%S")
            
            formatted_logs.append(log_dict)
        
        # 关闭连接
        conn.close()
        
        return JSONResponse({
            "success": True,
            "logs": formatted_logs,
            "total": total_count,
            "page": page,
            "limit": limit,
            "pages": (total_count + limit - 1) // limit
        })
    except Exception as e:
        logger.error(f"获取登录日志失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取登录日志失败: {str(e)}"
        }, status_code=500)

@router.get("/statistics")
@admin_required
async def admin_statistics_page(request: Request):
    """
    管理员考勤统计页面
    """
    
    # 获取基本统计信息
    stats = await get_admin_stats()
    
    # 获取open_id
    open_id = request.cookies.get("open_id")
    
    # 查询当前管理员信息
    conn = sqlite3.connect(USER_DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT username FROM users WHERE open_id = ? AND user_id = 'admin'", 
        (open_id,)
    )
    admin_info = cursor.fetchone()
    conn.close()
    
    admin_name = admin_info[0] if admin_info else "管理员"
    
    # 返回考勤统计页面
    return templates.TemplateResponse(
        "admin/statistics.html", 
        {
            "request": request,
            "user_info": {"username": admin_name, "user_id": "admin"},
            "stats": stats,
            "page_title": "考勤统计",
            "current_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    )

@router.get("/privilege")
@admin_required
async def admin_privilege_page(request: Request):
    """
    管理员特权登录页面
    """
    
    # 获取基本统计信息
    stats = await get_admin_stats()
    
    # 获取open_id
    open_id = request.cookies.get("open_id")
    
    # 查询当前管理员信息
    conn = sqlite3.connect(USER_DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT username FROM users WHERE open_id = ? AND user_id = 'admin'", 
        (open_id,)
    )
    admin_info = cursor.fetchone()
    conn.close()
    
    admin_name = admin_info[0] if admin_info else "管理员"
    
    # 返回特权登录页面
    return templates.TemplateResponse(
        "admin/privilege.html", 
        {
            "request": request,
            "user_info": {"username": admin_name, "user_id": "admin"},
            "stats": stats,
            "page_title": "特权登录",
            "current_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    )















@router.post("/departments")
@admin_required
async def post_departments(request: Request):
    """
    获取部门列表API (POST方法)
    """
    try:
        # 构建部门列表
        departments = []
        
        for dept_id, dept_name in DEPARTMENTS.items():
            departments.append({
                "department_id": dept_id,
                "department_name": dept_name
            })
                
        return JSONResponse({
            "success": True,
            "departments": departments
        })
    except Exception as e:
        logger.error(f"获取部门列表失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取部门列表失败: {str(e)}"
        }, status_code=500)

@router.post("/users")
@admin_required
async def post_department_users(request: Request):
    """
    获取部门下的用户列表API (POST方法)
    """
    try:
        # 获取请求数据
        data = await request.json()
        department_id = data.get("department_id")
        
        if not department_id:
            return JSONResponse({
                "success": False,
                "message": "部门ID不能为空"
            }, status_code=400)
            
        # 校验部门ID是否存在
        if department_id not in DEPARTMENTS:
            return JSONResponse({
                "success": False,
                "message": "部门不存在"
            }, status_code=404)
        
        
        
        return JSONResponse({
            "success": True,
            "users": users,
            "department_name": DEPARTMENTS[department_id]
        })
    except Exception as e:
        logger.error(f"获取部门用户失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取部门用户失败: {str(e)}"
        }, status_code=500)

@router.post("/user/info")
@admin_required
async def post_user_info(request: Request):
    """
    获取用户详细信息API (POST方法)
    """
    try:
        # 获取请求数据
        data = await request.json()
        user_id = data.get("user_id")
        
        if not user_id:
            return JSONResponse({
                "success": False,
                "message": "用户ID不能为空"
            }, status_code=400)
            
        # 连接用户数据库
        conn = sqlite3.connect(USER_DB_FILE)
        cursor = conn.cursor()
        
        # 查询用户信息
        cursor.execute(
            """
            SELECT user_id, username, department_id, department_name, position, last_activity
            FROM users 
            WHERE user_id = ?
            """,
            (user_id,)
        )
        
        user_data = cursor.fetchone()
        
        if not user_data:
            conn.close()
            return JSONResponse({
                "success": False,
                "message": "用户不存在"
            }, status_code=404)
        
        # 格式化用户数据
        user = {
            "user_id": user_data[0],
            "username": user_data[1],
            "department_id": user_data[2],
            "department_name": user_data[3] or DEPARTMENTS.get(user_data[2], "未知部门"),
            "position": user_data[4],
            "last_activity": user_data[5]
        }
        
        conn.close()
        
        return JSONResponse({
            "success": True,
            "user": user
        })
    except Exception as e:
        logger.error(f"获取用户信息失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取用户信息失败: {str(e)}"
        }, status_code=500)

@router.post("/sign/settings")
@admin_required
async def post_sign_settings(request: Request):
    """
    获取签到设置API (POST方法)
    """
    try:
        # 连接设置数据库
        conn = sqlite3.connect(SET_DB_FILE)
        cursor = conn.cursor()
        
        # 查询签到设置
        cursor.execute("SELECT setting_key, setting_value FROM system_settings WHERE setting_key LIKE 'sign_%'")
        
        settings = {}
        for row in cursor.fetchall():
            settings[row[0]] = row[1]
        
        conn.close()
        
        # 如果没有配置，使用默认值
        if not settings:
            settings = {
                "sign_morning_start_hour": "8",
                "sign_morning_start_minute": "0",
                "sign_morning_end_hour": "9",
                "sign_morning_end_minute": "0",
                "sign_afternoon_start_hour": "17",
                "sign_afternoon_start_minute": "0",
                "sign_afternoon_end_hour": "18",
                "sign_afternoon_end_minute": "0"
            }
        
        # 提取设置值
        sign_settings = {
            "morning_start_hour": settings.get("sign_morning_start_hour", "8"),
            "morning_start_minute": settings.get("sign_morning_start_minute", "0"),
            "morning_end_hour": settings.get("sign_morning_end_hour", "9"),
            "morning_end_minute": settings.get("sign_morning_end_minute", "0"),
            "afternoon_start_hour": settings.get("sign_afternoon_start_hour", "17"),
            "afternoon_start_minute": settings.get("sign_afternoon_start_minute", "0"),
            "afternoon_end_hour": settings.get("sign_afternoon_end_hour", "18"),
            "afternoon_end_minute": settings.get("sign_afternoon_end_minute", "0")
        }
        
        return JSONResponse({
            "success": True,
            "settings": sign_settings
        })
    except Exception as e:
        logger.error(f"获取签到设置失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取签到设置失败: {str(e)}"
        }, status_code=500)

@router.post("/user/sign/status")
@admin_required
async def post_user_sign_status(request: Request):
    """
    获取用户签到状态API (POST方法)
    """
    try:
        # 获取请求数据
        data = await request.json()
        user_id = data.get("user_id")
        
        if not user_id:
            return JSONResponse({
                "success": False,
                "message": "用户ID不能为空"
            }, status_code=400)
            
        # 获取当前日期
        today = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        today_timestamp = today.timestamp()
        tomorrow_timestamp = (today + datetime.timedelta(days=1)).timestamp()
        
        # 连接签到数据库
        conn = sqlite3.connect(SIGN_DB_FILE)
        cursor = conn.cursor()
        
        # 查询今日上班打卡记录
        cursor.execute(
            """
            SELECT sign_time FROM sign_logs 
            WHERE user_id = ? AND sign_type = '上班打卡' AND status = '成功'
            AND sign_time >= ? AND sign_time < ?
            ORDER BY sign_time DESC LIMIT 1
            """,
            (user_id, today_timestamp, tomorrow_timestamp)
        )
        
        morning_sign = cursor.fetchone()
        
        # 查询今日下班打卡记录
        cursor.execute(
            """
            SELECT sign_time FROM sign_logs 
            WHERE user_id = ? AND sign_type = '下班打卡' AND status = '成功'
            AND sign_time >= ? AND sign_time < ?
            ORDER BY sign_time DESC LIMIT 1
            """,
            (user_id, today_timestamp, tomorrow_timestamp)
        )
        
        afternoon_sign = cursor.fetchone()
        
        conn.close()
        
        # 格式化时间
        morning_time = datetime.datetime.fromtimestamp(morning_sign[0]).strftime("%H:%M:%S") if morning_sign else None
        afternoon_time = datetime.datetime.fromtimestamp(afternoon_sign[0]).strftime("%H:%M:%S") if afternoon_sign else None
        
        return JSONResponse({
            "success": True,
            "morning_signed": morning_sign is not None,
            "afternoon_signed": afternoon_sign is not None,
            "morning_time": morning_time,
            "afternoon_time": afternoon_time
        })
    except Exception as e:
        logger.error(f"获取用户签到状态失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取用户签到状态失败: {str(e)}"
        }, status_code=500)

@router.post("/privilege/sign")
@admin_required
async def post_privilege_sign(request: Request):
    """
    管理员代理用户签到API (POST方法)
    """
    try:
        # 获取请求数据
        data = await request.json()
        user_id = data.get("user_id")
        sign_type = data.get("sign_type")
        
        if not user_id or not sign_type:
            return JSONResponse({
                "success": False,
                "message": "用户ID和签到类型不能为空"
            }, status_code=400)
            
        # 获取管理员信息
        admin_open_id = request.cookies.get("open_id")
        
        conn_user = sqlite3.connect(USER_DB_FILE)
        cursor_user = conn_user.cursor()
        cursor_user.execute(
            "SELECT username FROM users WHERE open_id = ? AND user_id = 'admin'", 
            (admin_open_id,)
        )
        admin_info = cursor_user.fetchone()
        
        if not admin_info:
            conn_user.close()
            return JSONResponse({
                "success": False,
                "message": "管理员信息验证失败"
            }, status_code=403)
            
        admin_username = admin_info[0]
        
        # 获取普通用户信息
        cursor_user.execute(
            "SELECT username, department_id, department_name FROM users WHERE user_id = ?",
            (user_id,)
        )
        user_info = cursor_user.fetchone()
        conn_user.close()
        
        if not user_info:
            return JSONResponse({
                "success": False,
                "message": "用户不存在"
            }, status_code=404)
            
        username = user_info[0]
        
        # 获取当前时间
        now = datetime.datetime.now()
        timestamp = now.timestamp()
        
        # 获取IP地址
        client_host = request.client.host if request.client else "127.0.0.1"
        
        # 写入签到记录
        conn_sign = sqlite3.connect(SIGN_DB_FILE)
        cursor_sign = conn_sign.cursor()
        
        cursor_sign.execute(
            """
            INSERT INTO sign_logs (user_id, username, sign_time, sign_type, status, remark, ip_address)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            """,
            (
                user_id, 
                username, 
                timestamp, 
                sign_type, 
                "成功", 
                f"管理员 {admin_username} 代理签到", 
                client_host
            )
        )
        
        conn_sign.commit()
        conn_sign.close()
        
        # 记录操作日志
        from app.utils.log import add_operation_log
        await add_operation_log(
            user_id="admin",
            username=admin_username,
            operation_type="特权签到",
            operation_detail=f"为用户 {username}({user_id}) 执行{sign_type}",
            status="成功",
            ip_address=client_host
        )
        
        return JSONResponse({
            "success": True,
            "message": f"为用户 {username} {sign_type}成功"
        })
    except Exception as e:
        logger.error(f"管理员代理签到失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"代理签到失败: {str(e)}"
        }, status_code=500)

@router.post("/user/sign/records")
@admin_required
async def post_user_sign_records(request: Request):
    """
    获取用户签到记录API (POST方法)
    """
    try:
        # 获取请求数据
        data = await request.json()
        user_id = data.get("user_id")
        date = data.get("date")
        
        if not user_id:
            return JSONResponse({
                "success": False,
                "message": "用户ID不能为空"
            }, status_code=400)
            
        # 解析日期参数
        if date:
            try:
                query_date = datetime.datetime.strptime(date, "%Y-%m-%d")
                start_timestamp = query_date.timestamp()
                end_timestamp = (query_date + datetime.timedelta(days=1)).timestamp()
            except ValueError:
                return JSONResponse({
                    "success": False,
                    "message": "日期格式无效，请使用YYYY-MM-DD格式"
                }, status_code=400)
        else:
            # 默认查询当天
            today = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            start_timestamp = today.timestamp()
            end_timestamp = (today + datetime.timedelta(days=1)).timestamp()
            
        # 连接签到数据库
        conn = sqlite3.connect(SIGN_DB_FILE)
        cursor = conn.cursor()
        
        # 查询签到记录
        cursor.execute(
            """
            SELECT id, sign_time, sign_type, status, remark, ip_address
            FROM sign_logs 
            WHERE user_id = ? AND sign_time >= ? AND sign_time < ?
            ORDER BY sign_time DESC
            """,
            (user_id, start_timestamp, end_timestamp)
        )
        
        records = []
        for row in cursor.fetchall():
            sign_time_formatted = datetime.datetime.fromtimestamp(row[1]).strftime("%Y-%m-%d %H:%M:%S")
            
            records.append({
                "id": row[0],
                "sign_time": row[1],
                "sign_time_formatted": sign_time_formatted,
                "sign_type": row[2],
                "status": row[3],
                "remark": row[4],
                "ip_address": row[5]
            })
        
        conn.close()
        
        return JSONResponse({
            "success": True,
            "records": records,
            "total": len(records)
        })
    except Exception as e:
        logger.error(f"获取用户签到记录失败: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": f"获取用户签到记录失败: {str(e)}"
        }, status_code=500)
    
    