name: Docker Image CI/CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号(例如v1.1.0)'
        required: true
        default: ''
  push:
    paths:
      - '.github/workflows/docker-publish.yml'
      - 'app/**'
      - 'config.py'
      - 'database.py'
      - 'Dockerfile'
      - 'gunicorn.conf.py'
      - 'run.py'
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  work:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以支持版本计算
          
      # 获取所有标签
      - name: Fetch all tags
        run: git fetch --tags --force
          
      # 设置版本号
      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # 使用手动指定的版本号
            echo "NEW_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            # 自动计算新版本号
            # 确保获取所有远程标签
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
            echo "找到最新标签: ${LATEST_TAG}"
            
            # 分解版本号
            MAJOR=$(echo ${LATEST_TAG} | cut -d. -f1)
            MINOR=$(echo ${LATEST_TAG} | cut -d. -f2)
            PATCH=$(echo ${LATEST_TAG} | cut -d. -f3)
            
            # 增加补丁版本号
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            
            # 检查新版本是否已存在
            if git tag | grep -q "^${NEW_VERSION}$"; then
              # 如果已存在，则继续递增直到找到未使用的版本号
              while git tag | grep -q "^${NEW_VERSION}$"; do
                NEW_PATCH=$((NEW_PATCH + 1))
                NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
              done
              echo "版本号冲突，使用新版本号: ${NEW_VERSION}"
            fi
            
            echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
            echo "生成的新版本号: ${NEW_VERSION}"
          fi
      
      # 创建新tag
      - name: Create Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # 再次检查标签是否已存在
          if git tag | grep -q "^${{ env.NEW_VERSION }}$"; then
            echo "标签 ${{ env.NEW_VERSION }} 已存在，跳过创建"
          else
            git tag -a ${{ env.NEW_VERSION }} -m "Release ${{ env.NEW_VERSION }}"
            git push origin ${{ env.NEW_VERSION }}
          fi
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: chiupam/workclock
          tags: |
            type=raw,value=${{ env.NEW_VERSION }}
            type=raw,value=latest
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ env.NEW_VERSION }}
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.NEW_VERSION }}
          tag_name: ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true